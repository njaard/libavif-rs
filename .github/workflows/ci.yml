name: CI

on:
  pull_request:
  push:
    branches:
      - master

env:
  RUST_BACKTRACE: full

jobs:
  rustfmt:
    name: rustfmt / linux / stable
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt

      - name: cargo fmt -- --check
        run: |
          cargo fmt --all -- --check

  clippy:
    name: clippy / linux / stable
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y ninja-build nasm meson

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy

      - name: cargo clippy --all --examples
        run: cargo clippy --all --examples

  test:
    name: test / ${{ matrix.name }}
    runs-on: ${{ matrix.os || 'ubuntu-22.04' }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux / stable
            rust: stable
            target: x86_64-unknown-linux-gnu
          - name: linux / stable / codec-aom
            features: '--no-default-features --features codec-aom'
            target: x86_64-unknown-linux-gnu
          - name: linux / beta
            rust: beta
            target: x86_64-unknown-linux-gnu
          - name: linux / nightly
            rust: nightly
            target: x86_64-unknown-linux-gnu
          - name: linux / 1.70.0
            rust: 1.70.0
            target: x86_64-unknown-linux-gnu
          - name: macOS / stable
            os: macOS-latest
            target: x86_64-apple-darwin
          - name: macOS / stable / codec-aom
            os: macOS-latest
            features: '--no-default-features --features codec-aom'
            target: x86_64-apple-darwin
          - name: windows / stable
            os: windows-2019
            target: x86_64-pc-windows-msvc
          - name: windows / stable codec-aom
            os: windows-2019
            features: '--no-default-features --features codec-aom'
            target: x86_64-pc-windows-msvc
          - name: wasm / stable codec-aom
            os: macOS-latest
            target: 'wasm32-unknown-unknown'
            features: '--no-default-features --features codec-aom'
          - name: wasi / stable codec-rav1e
            os: macOS-14
            target: 'wasm32-wasi-preview1-threads'
            # libaom does not support wasi due to https://github.com/WebAssembly/wasi-libc/issues/432
            features: '--no-default-features --features codec-rav1e'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install dependencies (linux)
        if: (matrix.os || 'ubuntu-22.04') == 'ubuntu-22.04'
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y ninja-build nasm meson

      - name: Install dependencies (macOS)
        if: matrix.os == 'macOS-latest'
        run: |
          brew install ninja nasm meson
      
      - name: Install emcc
        if: matrix.target == 'wasm32-unknown-unknown'
        run: brew install emscripten

      - name: Install dependencies (windows)
        if: matrix.os == 'windows-2019'
        run: |
          choco install -y ninja
          pip install meson

      - name: Install nasm (windows)
        if: matrix.os == 'windows-2019'
        uses: ilammy/setup-nasm@v1

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust || 'stable' }}
          targets: ${{ matrix.target }}

      - name: Test (Windows)
        if: matrix.os == 'windows-2019'
        shell: cmd
        run: |
          call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          cargo test ${{ matrix.features }} --target ${{ matrix.target }}

      - name: Test (Linux, macOS)
        if: ${{ matrix.os != 'windows-2019' && !contains(matrix.target, 'wasm') }}
        run: |
          cargo test ${{ matrix.features }} --target ${{ matrix.target }}

      - name: Check wasm
        if: matrix.target == 'wasm32-unknown-unknown'
        run: |
          export EMSCRIPTEN_CMAKE_FILE="$(brew --cellar emscripten)/$(brew list --versions emscripten | tr ' ' '\n' | tail -1)/libexec/cmake/Modules/Platform/Emscripten.cmake"
          cargo check ${{ matrix.features }} --target ${{ matrix.target }}
        env:
          CC: 'emcc'
          CXX: 'emcc'

      - name: Check wasi
        if: matrix.target == 'wasm32-wasi-preview1-threads'
        run: |
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-21/wasi-sdk-21.0-macos.tar.gz
          tar -xvf wasi-sdk-21.0-macos.tar.gz
          export WASI_SDK_PATH="$(pwd)/wasi-sdk-21.0"
          export PATH="$WASI_SDK_PATH/bin:$PATH"
          cargo check ${{ matrix.features }} --target ${{ matrix.target }}
        env:
          CC: 'clang'
          CXX: 'clang++'
          AR: "${{ github.workspace }}/wasi-sdk-21.0/bin/ar"
          CFLAGS: "--target=wasm32-wasi-threads -pthread --sysroot=${{ github.workspace }}/wasi-sdk-21.0/share/wasi-sysroot"
          CXXFLAGS: "--target=wasm32-wasi-threads -pthread --sysroot=${{ github.workspace }}/wasi-sdk-21.0/share/wasi-sysroot"
          LDFLAGS: "-fuse-ld=${{ github.workspace }}/wasi-sdk-21.0/bin/wasm-ld --target=wasm32-wasi-threads"
          CARGO_TARGET_WASM32_WASI_PREVIEW1_THREADS_LINKER: "${{ github.workspace }}/wasi-sdk-21.0/bin/wasm-ld"